import { FC, Fragment, useContext, useState } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { Popover, Transition } from '@headlessui/react';
import { PlusIcon } from '@heroicons/react/20/solid';
import {
  ArrowLeftOnRectangleIcon,
  ArrowRightOnRectangleIcon,
  Bars3Icon,
  XMarkIcon
} from '@heroicons/react/24/solid';

import {
  ROUTE_BEVERAGES_INDEX,
  ROUTE_DESSERTS_INDEX,
  ROUTE_HOME,
  ROUTE_MEALS_INDEX,
  ROUTE_RECIPE_NEW,
  ROUTE_SETTINGS
} from '../Routes';
import Profile from '../pages/auth/Profile';
import Login from '../pages/auth/Login';
import { DBUserContext, FlashContext } from '..';
import { DBUser } from '../types/user';
import { logout } from '../firebase/firebase';
import { Cog6ToothIcon, GlobeAltIcon } from '@heroicons/react/24/outline';
import ListBox from '../components/dropdown/Listbox';
import { useTranslation } from 'react-i18next';
import { availableLanguages } from '../languages/config';
import { default as i18n } from 'i18next';
import { RecipeType } from '../types/recipe';

type MobileMenuProps = {
  user: DBUser | undefined;
  handleLogout: (e: any) => Promise<void>;
  handleLogin: (e: any) => void;
  handleLanguage: (e: any) => void;
};

const MobileMenu: FC<MobileMenuProps> = ({ user, handleLogout, handleLogin, handleLanguage }) => {
  const { t } = useTranslation();

  return (
    <>
      <Popover>
        <div className="-mr-2 -my-2 md:hidden">
          <Popover.Button className="p-2 inline-flex items-center justify-center">
            <span className="sr-only">Open menu</span>
            <Bars3Icon className="h-7 w-7 text-white" aria-hidden="true" />
          </Popover.Button>
        </div>
        <Transition
          as={Fragment}
          enter="duration-200 ease-out"
          enterFrom="opacity-0 scale-100"
          enterTo="opacity-100 scale-100"
          leave="duration-100 ease-in"
          leaveFrom="opacity-100 scale-100"
          leaveTo="opacity-0 scale-100">
          <Popover.Panel
            focus
            className="absolute top-0 z-40 inset-x-0 p-2 pt-4 transition transform origin-top-right md:hidden">
            <div className="rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 bg-white divide-y-2 divide-gray-50">
              <div className="pt-5 pb-6 px-5">
                <div className="flex items-center justify-between">
                  <div className="-mr-2">
                    <Popover.Button className="rounded-md p-2 inline-flex items-center justify-center text-navy-400">
                      <span className="sr-only">Close menu</span>
                      <XMarkIcon className="h-6 w-6 text-navy-500" aria-hidden="true" />
                    </Popover.Button>
                  </div>
                  <div>
                    <NavLink to={ROUTE_HOME}>
                      <span className="text-amber-400">CMAOYT</span>
                    </NavLink>
                  </div>
                </div>
                <div className="mt-6">
                  <nav className="grid gap-y-8">
                    {
                      <NavLink to={ROUTE_HOME}>
                        <Popover.Button className="w-full -m-3 p-3 flex items-center rounded-md text-gray-900 hover:bg-gray-50 hover:text-amber-400">
                          <span className="ml-3 text-base font-medium">Home</span>
                        </Popover.Button>
                      </NavLink>
                    }
                    {
                      <NavLink to={ROUTE_DESSERTS_INDEX}>
                        <Popover.Button className=" w-full -m-3 p-3 flex items-center rounded-md text-gray-900 hover:bg-gray-50 hover:text-amber-400">
                          <span className="ml-3 text-base font-medium">
                            {t(RecipeType.Desserts)}
                          </span>
                        </Popover.Button>
                      </NavLink>
                    }
                    {
                      <NavLink to={ROUTE_MEALS_INDEX}>
                        <Popover.Button className=" w-full -m-3 p-3 flex items-center rounded-md text-gray-900 hover:bg-gray-50 hover:text-amber-400">
                          <span className="ml-3 text-base font-medium">{t(RecipeType.Meals)}</span>
                        </Popover.Button>
                      </NavLink>
                    }
                    {
                      <NavLink to={ROUTE_BEVERAGES_INDEX}>
                        <Popover.Button className=" w-full -m-3 p-3 flex items-center rounded-md text-gray-900 hover:bg-gray-50 hover:text-amber-400">
                          <span className="ml-3 text-base font-medium">
                            {t(RecipeType.Beverages)}
                          </span>
                        </Popover.Button>
                      </NavLink>
                    }
                  </nav>
                </div>
                <div className="pt-4">
                  {user?.role === 'admin' && (
                    <NavLink to={ROUTE_RECIPE_NEW}>
                      <Popover.Button className="w-full flex items-center justify-center px-4 py-2 mb-2 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-navy-600 hover:bg-navy-700">
                        <PlusIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
                        {t('create')}
                      </Popover.Button>
                    </NavLink>
                  )}
                  {user && (
                    <NavLink to={ROUTE_SETTINGS}>
                      <Popover.Button className="w-full flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-navy-600 hover:bg-navy-700">
                        <Cog6ToothIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
                        {t('settings')}
                      </Popover.Button>
                    </NavLink>
                  )}
                </div>
              </div>

              <div className="py-6 px-5 space-y-6">
                <ListBox
                  choices={availableLanguages}
                  selected={i18n.language}
                  handleSelected={handleLanguage}
                  color="bg-navy-600 text-white"
                  variant="withIcon"
                  icon={<GlobeAltIcon />}
                />
              </div>

              <div className="py-6 px-5 space-y-6">
                {user?.isLogged && (
                  <div>
                    {t('loggeAs')} {user.name}
                  </div>
                )}
                <div>
                  {user?.isLogged ? (
                    <div onClick={handleLogout}>
                      <Popover.Button className="w-full flex items-center justify-center px-4 py-2 border rounded-md shadow-sm text-base font-medium">
                        <ArrowRightOnRectangleIcon
                          className="-ml-1 mr-2 h-5 w-5"
                          aria-hidden="true"
                        />
                        {t('logout')}
                      </Popover.Button>
                    </div>
                  ) : (
                    <div onClick={handleLogin}>
                      <Popover.Button className="w-full flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-navy-600 hover:bg-navy-700">
                        <ArrowLeftOnRectangleIcon
                          className="-ml-1 mr-2 h-5 w-5"
                          aria-hidden="true"
                        />
                        {t('login')}
                      </Popover.Button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </Popover.Panel>
        </Transition>
      </Popover>

      <NavLink to={ROUTE_HOME} className="mr-2 md:hidden">
        <span className="text-amber-400 text-lg">CMAOYT</span>
      </NavLink>
    </>
  );
};

const RightSideNavBar: FC<MobileMenuProps> = ({
  user,
  handleLogout,
  handleLogin,
  handleLanguage
}) => {
  const { t } = useTranslation();

  return (
    <div className="absolute hidden inset-y-0 right-0 md:flex items-center pr-2 md:static md:inset-auto md:ml-6 md:pr-0">
      {user?.role === 'admin' && (
        <NavLink title="Create" to={ROUTE_RECIPE_NEW}>
          <div className="mr-4 whitespace-nowrap inline-flex items-center justify-center px-4 py-2 border border-transparent ring-2 ring-white rounded-md shadow-sm text-base font-medium text-white bg-navy-700 hover:ring-amber-400 hover:text-amber-400">
            <PlusIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            {t('create')}
          </div>
        </NavLink>
      )}

      <div className="ml-2">
        <Profile
          dbUser={user}
          handleLogout={handleLogout}
          handleLogin={handleLogin}
          handleLanguage={handleLanguage}
        />
      </div>
    </div>
  );
};

const LeftSideNavBar = () => {
  const { t } = useTranslation();

  return (
    <div className="flex-1 hidden md:flex items-center justify-center md:justify-start">
      <div className="flex-shrink-0 flex">
        <NavLink to={ROUTE_HOME}>
          <span className="text-amber-400 text-lg">CMAOYT</span>
        </NavLink>
      </div>
      <div className="hidden md:block md:ml-12">
        <div className="flex space-x-6">
          <NavLink
            to={ROUTE_HOME}
            title="Home"
            className={'text-gray-200 text-lg hover:text-amber-400'}>
            Home
          </NavLink>
          <NavLink
            to={ROUTE_DESSERTS_INDEX}
            title={RecipeType.Desserts}
            className={'text-gray-200 text-lg hover:text-amber-400'}>
            {t(RecipeType.Desserts)}
          </NavLink>
          <NavLink
            to={ROUTE_MEALS_INDEX}
            title={RecipeType.Meals}
            className={'text-gray-200 text-lg hover:text-amber-400'}>
            {t(RecipeType.Meals)}
          </NavLink>
          <NavLink
            to={ROUTE_BEVERAGES_INDEX}
            title={RecipeType.Beverages}
            className={'text-gray-200 text-lg hover:text-amber-400'}>
            {t(RecipeType.Beverages)}
          </NavLink>
        </div>
      </div>
    </div>
  );
};

const NavBar: FC = () => {
  const DBUser = useContext(DBUserContext);
  const flashContext = useContext(FlashContext);
  const [openLogin, setOpenLogin] = useState(false);
  const navigate = useNavigate();

  const handleLogout = async (e: any) => {
    e.preventDefault();

    DBUser.isLogged = false;
    DBUser.name = '';
    DBUser.role = '';

    logout(flashContext);
    navigate(ROUTE_HOME);
  };

  const handleLogin = async (e: any) => {
    e.preventDefault();
    setOpenLogin(true);
  };

  const handleLanguage = (event: any) => {
    i18n.changeLanguage(event);
  };

  return (
    <>
      <Login open={openLogin} setOpen={setOpenLogin} />

      <nav className="w-full border-b bg-navy-700">
        <div className="max-w-7xl mx-auto px-2 md:px-6 lg:px-8">
          <div className="relative flex items-center justify-between h-16">
            <MobileMenu
              user={DBUser}
              handleLogout={handleLogout}
              handleLogin={handleLogin}
              handleLanguage={handleLanguage}
            />

            <LeftSideNavBar />
            <RightSideNavBar
              user={DBUser}
              handleLogout={handleLogout}
              handleLogin={handleLogin}
              handleLanguage={handleLanguage}
            />
          </div>
        </div>
      </nav>
    </>
  );
};

export default NavBar;
